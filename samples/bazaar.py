#!/usr/bin/env python3
"""
Script to interact with the Malware Bazaar API to:

- Download
- Upload
- Query

Author: @linkavych
Date: 2022-09-18
"""
import os
import requests
import hashlib
import json
from typing import Optional

# CLI
import typer
from rich import print

BAZAAR_KEY = os.environ["BAZAAR_API"]
BASE_URL = "https://mb-api.abuse.ch/api/v1/"
HEADERS = {"API-KEY": BAZAAR_KEY}

def list_reader(file: str) -> list:
    """
    Opens a file from the provided path

    Returns the list of elements in the file
    """
    with open(file, "r") as f:
        data = f.readlines()

    return [line.strip() for line in data]

def json_reader(file: str):
    """
    Opens a file containing JSON data

    Returns the json formatted data
    """
    with open(file, "r") as f:
        json_data = json.loads(f.read())

    return json_data


def get_filehash(fname: str):
    """
    Get the sha256 hash of a provided file

    return hash
    """
    with open(fname, "rb") as f:
        file_bytes = f.read()
        sha256_hash = hashlib.sha256(file_bytes).hexdigest()

    return sha256_hash


def download_sample(hash: str):
    """
    Download a malware sample using a provided hash

    Param:
        - hash - string of md5 or sha256
    """
    payload = {"query": "get_file", "hash": hash}
    r = requests.post(
        BASE_URL, data=payload, headers=HEADERS, timeout=15, allow_redirects=True
    )
    sample = r.content

    with open(hash + ".zip", "wb") as f:
        f.write(sample)

    return


def query_hash(hash: str):
    """
    Query a malware sample from malware bazaar
    """
    payload = {"query": "get_info", "hash": hash}
    r = requests.post(
        BASE_URL, data=payload, headers=HEADERS, timeout=15, allow_redirects=True
    )
    response = r.content.decode("utf-8", "ignore")

    print(response)

    return


def upload_sample(sample: str, tags=None, comment=None):
    """
    Upload a sample to malware bazaar
    """
    if tags:
        tag_list = list_reader(tags)
    if comment:
        comment = comment

    payload = {
        "anonymous": 0,
        "tags": tag_list,
        "context": {"comment": comment},
    }

    files = {
        "json_data": (None, json.dumps(payload), "application/json"),
        "file": (open(sample, "rb"))
    }

    r = requests.post(
        BASE_URL, files=files, headers=HEADERS, timeout=15, allow_redirects=True
    )

    response = r.content.decode("utf-8", "ignore")

    #debugging
    #print(response)

    return


def main(
    fname: str = typer.Option("", "--file", "-f", help="The name, or path, of the sample file."),
    hashval: str = typer.Option("", "--hash", "-h", help="The sha256 hash of the sample."),
    tags: str = typer.Option("", "--tags", "-t", help="A file with a list of tags to apply to a sample upload."),
    upload: bool = typer.Option(False, "--upload", "-u", help="Default: False, If True supply the file name (fname), tags (optional), and comment (optional)"),
    download: bool = typer.Option(False, "--download", "-d", help="Default false. If true, supply the sha256 hash (hashval) of the sample to download."),
    hash_query: bool = typer.Option(False, "--query", "-q", help="Default: False. If true, supply the sha256 hash (hashval) to query"),
    file_query: bool  = typer.Option(False, "--fq", "-fq", help="Default: False. If true, supply the file name to query. This will get the sha256 hash value and pass that to the query."),
    comment: str = typer.Option("", "--comment", "-c", help="Provide a comment when uploading a malware sample."),
):
    if upload:
        upload_sample(fname, tags, comment)
    if download:
        download_sample(hashval)
    if hash_query:
        query_hash(hashval)
    if file_query:
        hashval = get_filehash(fname)
        query_hash(hashval)

    return

if __name__ == "__main__":
    typer.run(main)
