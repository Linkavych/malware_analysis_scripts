#!/usr/bin/env python3
"""
A script for interacting with the VX-Underground API; available to subscribers.

Script should be portable, with minor changes, to any mwdb instance.

Author: @linkavych
Date: 2022-07-21
"""
import os
import itertools
from urllib.parse import urljoin
from typing import Optional
import requests

# for mwdb interactions
from mwdblib import MWDB

# CLI stuff
import typer
from rich import print
from rich.console import Console
from rich.table import Table

# to make password protected zip
import pyminizip

VXUG_KEY = os.environ["VXUG_API"]
BASE_URL = "https://virus.exchange/api/"

FILE_RESULTS = []


def download_file(mwdb, fhash: str):
    """
    Download a single file by hash
    Return the file
    """
    file = mwdb.query_file(fhash)

    return file


def download_recent(mwdb):
    """
    Download recent files

    Return a list of files
    """
    files = mwdb.recent_files()

    return files


def slice_of_files(mwdb, num: int):
    """
    Retrieves a list of recent file samples and returns a file_slice

    Param:
      Num - integer of files to retrieve

    Returns a slice of the list
    """
    file_list = download_recent(mwdb)
    file_slice = list(itertools.islice(file_list, num))

    return file_slice


def up_check(url: str):
    """
    Test to see if the database is available.
    Exit on fail
    """
    ping_url = urljoin(url, "ping")
    r = requests.get(ping_url)

    if r.status_code != 200:
        print(
            f"[bold red][!] VUXG may be unavailable. Status code: {r.status_code}[/bold red]"
        )
        typer.Exit(code=1)
    else:
        return


def write_file_zip(file, name):
    """
    Take in a file object from mwdb, write the file, zip the file, delete the file

    returns nothing
    """
    with open(name, "wb") as f:
        f.write(file.content)

    fname = file.name
    ftype = file.type
    fsize = file.size

    FILE_RESULTS.append((fname, ftype, fsize))

    pyminizip.compress(name, "./", f"{name}.zip", "infected", 1)
    os.remove(name)


def download_by_type(mwdb, ftype: str, num: int):
    """
    Search for files by type and return a selection of files
    types:
        type:"Composite*" - Word Documents
        type:"ELF*" - ELF samples
        type:"PE*" - PE samples
        type:"MS Windows shortcut*" - windows shortcut files
        type:"*POSIX*" OR type:"Bourne*" - shell scripts
    """
    if ftype in ('d', 'D'):
        query = "type:Composite*"
    elif ftype in ('pe', 'PE'):
        query = "type:PE*"
    elif ftype in ('elf', 'ELF'):
        query = "type:ELF*"
    elif ftype in ('lnk', 'LNK'):
        query = "type:*shortcut*"
    elif ftype == "script":
        query = "type:POSIX* OR type:Bourne*"
    else:
        print("[bold red][!] Thhe type {ftype} is not yet supported.[/bold red]")
        print("[bold red]See help: ./vxug.py --help[/bold red]")
        typer.Exit(code=1)

    files = mwdb.search_files(query)
    file_slice = list(itertools.islice(files, num))

    return file_slice


def main(
    fhash: Optional[str] = typer.Argument(None),
    file_type: str = typer.Option(
        None,
        help="Provide a file type: d or D - Document, PE or pe - PE Samples, ELF or elf - ELF samples, lnk or LNK - Windows shortcut samples, script - shell script samples",
    ),
    num: int = typer.Option(
        1, help="Number of samples to download. Use with --file-type"
    ),
    recent_samples: int = typer.Option(
        0, help="Number of samples to download from recent submissions"
    ),
):
    '''
    Main function

    Builds the output table using rich and typer
    Uses a simple if-elif-else construct to determine methods

    password for zip: 'infected'
    '''
    up_check(BASE_URL)

    # Create the MWDB session
    mwdb = MWDB(api_url=BASE_URL, api_key=VXUG_KEY)

    console = Console()
    table = Table(title="Downloaded Malware Samples", show_lines=True)
    table.add_column("File Name", justify="center", style="dark_goldenrod", width=64)
    table.add_column("File Type", justify="center", style="green", width=80)
    table.add_column("File Size in bytes", justify="center", style="blue")

    if fhash:
        file = download_file(mwdb, fhash)
        write_file_zip(file, file.name)
        for item in FILE_RESULTS:
            table.add_row(item[0], item[1], str(item[2]))
        console.print(table)
    elif recent_samples:
        files = slice_of_files(mwdb, num)
        for f in files:
            write_file_zip(f, f.name)
        for item in FILE_RESULTS:
            table.add_row(item[0], item[1], str(item[2]))
        console.print(table)
    elif file_type:
        files = download_by_type(mwdb, file_type, num)
        for f in files:
            write_file_zip(f, f.name)
        for item in FILE_RESULTS:
            table.add_row(item[0], item[1], str(item[2]))
        console.print(table)

    else:
        print("[bold red][!] Run python3 vxug.py --help for options[/bold red]")
        raise typer.Exit(code=1)


if __name__ == "__main__":
    typer.run(main)
