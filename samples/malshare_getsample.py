#!/usr/bin/env python3
"""
A tool to grab files from Malshare
Can Download either a spoecific hash
A specific number of files from the last 24 hours
Or All files from the last 24 hours

author: @linkavych
date: 2022-07-21
"""
import os
import json
import requests
import magic

# import uncommon stuff
import pyminizip  # make zip files with password
import typer
from typing import Optional

from rich import print
from rich.console import Console
from rich.table import Table

from pathlib import Path

api_key = os.environ["MALSHARE_API"]

base_url = "https://malshare.com/api.php"

final_files = []


def download(hash: str):
    """
    Downlaod a file with a provided hash

    Params:
      hash - md5 or sha256 hash of a file
    """

    payload = {"api_key": api_key, "action": "getfile", "hash": hash}
    r = requests.get(base_url, params=payload)
    sample = r.content
    with open(hash, "wb") as fh:
        print(f"[bold green][+] Downloading:[/bold green] {hash}...")
        fh.write(sample)

    ftype = get_type(hash)
    fsize = get_size(hash)

    # Compress and remove file
    pyminizip.compress(hash, "./", f"{hash}.zip", "infected", 1)
    os.remove(hash)

    print("[bold blue][+] Download complete![/bold blue]")

    final_files.append((hash, ftype, fsize))


def get_type(file):
    """
    Get the file type using magic bytes

    Returns the type of file
    """
    return magic.from_file(file)


def get_size(file):
    """
    Get the eisze of the file in bytes
    Return the number of bytes
    """
    return Path(file).stat().st_size


def get_list():
    """
    Get a list of files uploaded to malshare in the last 24 hours
    """
    global SHA256HASHES

    payload = {"api_key": api_key, "action": "getlist"}
    r = requests.get(base_url, params=payload)
    raw_hashes = r.text
    json_obj = json.loads(raw_hashes)
    SHA256HASHES = [hash["sha256"] for hash in json_obj]


def main(
    hash: Optional[str] = typer.Argument(None),
    num: int = typer.Option(
        0, help="Number of Samples to download from the last 24 hours."
    ),
    last_24: bool = typer.Option(
        False, help="Download all samples from the last 24 hours."
    ),
):
    console = Console()
    table = Table(title="Downloaded Malware Samples", show_lines=True)
    table.add_column("sha256 Hash", justify="center", style="dark_goldenrod", width=64)
    table.add_column("File Type", justify="center", style="green", width=80)
    table.add_column("File Size in bytes", justify="center", style="blue")

    if hash:
        download(hash)
        for item in final_files:
            table.add_row(item[0], item[1], str(item[2]))
        console.print(table)
    elif last_24:
        get_list()
        for i in SHA256HASHES:
            download(i)
        for item in final_files:
            table.add_row(item[0], item[1], str(item[2]))
        console.print(table)
    elif num:
        get_list()
        for i in SHA256HASHES[:num]:
            download(i)
        for item in final_files:
            table.add_row(item[0], item[1], str(item[2]))
        console.print(table)
    else:
        print(
            "[bold red][!] Run `python3 malshare_getsample.py` for help...[/bold red]"
        )
        raise typer.Exit(code=1)


if __name__ == "__main__":
    typer.run(main)
